{"version":3,"sources":["../src/index.js"],"names":["debug","uniqueFn","compile","path","uniqueId","opts","source","node","quasis","reduce","head","quasi","value","raw","expressions","get","forEach","expr","buildCodeFrameError","queryDocument","generateHash","hash","crypto","createHash","update","Buffer","from","documentId","digest","definitions","length","definition","name","Error","body","uniqueUsed","definitionsProperty","properties","find","property","key","definitionsArray","extraDefinitions","map","allDefinitions","visitor","Program","programPath","state","tagNames","scope","generateUidIdentifier","traverse","ImportDeclaration","defaultSpecifier","specifiers","specifier","push","local","remove","filter","TaggedTemplateExpression","some","tag","used","replaceWith","error","console","unshiftContainer"],"mappings":"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","file":"index.js","sourcesContent":["// @flow\n\nimport {\n  isIdentifier,\n  isMemberExpression,\n  isImportDefaultSpecifier,\n  variableDeclaration,\n  variableDeclarator,\n  memberExpression,\n  callExpression,\n  identifier\n} from 'babel-types';\nimport parseLiteral from 'babel-literal-to-ast';\nimport {parseExpression} from 'babylon';\nimport gql from 'graphql-tag';\nimport createDebug from 'debug';\nimport {print} from 'graphql';\nimport crypto from 'crypto';\n\nconst debug = createDebug('babel-plugin-graphql-tag');\n\n// eslint-disable-next-line no-restricted-syntax\nconst uniqueFn = parseExpression(`\n  (definitions) => {\n    const names = {};\n    return definitions.filter(definition => {\n      if (definition.kind !== 'FragmentDefinition') {\n        return true;\n      }\n      const name = definition.name.value;\n      if (names[name]) {\n        return false;\n      } else {\n        names[name] = true;\n        return true;\n      }\n    });\n  }\n`);\n\nexport default () => {\n  const compile = (path: Object, uniqueId, opts) => {\n    const source = path.node.quasis.reduce((head, quasi) => {\n      return head + quasi.value.raw;\n    }, '');\n\n    const expressions = path.get('expressions');\n\n    expressions.forEach((expr) => {\n      if (!isIdentifier(expr) && !isMemberExpression(expr)) {\n        throw expr.buildCodeFrameError('Only identifiers or member expressions are allowed by this plugin as an interpolation in a graphql template literal.');\n      }\n    });\n\n    debug('compiling a GraphQL query', source);\n\n    const queryDocument = gql(source);\n    if (opts && opts.generateHash) {\n      // generate graphql documentId\n      const hash = crypto.createHash('sha256');\n      hash.update(Buffer.from(print(queryDocument)));\n      // $FlowFixMe inject documentId\n      queryDocument.documentId = hash.digest('base64');\n    }\n    // If a document contains only one operation, that operation may be unnamed:\n    // https://facebook.github.io/graphql/#sec-Language.Query-Document\n    if (queryDocument.definitions.length > 1) {\n      for (const definition of queryDocument.definitions) {\n        if (!definition.name) {\n          throw new Error('GraphQL query must have name.');\n        }\n      }\n    }\n\n    const body = parseLiteral(queryDocument);\n    \n    let uniqueUsed = false;\n\n    if (expressions.length) {\n      const definitionsProperty = body.properties.find((property) => {\n        return property.key.value === 'definitions';\n      });\n\n      const definitionsArray = definitionsProperty.value;\n\n      const extraDefinitions = expressions.map((expr) => {\n        return memberExpression(expr.node, identifier('definitions'));\n      });\n\n      const allDefinitions = callExpression(\n        memberExpression(definitionsArray, identifier('concat')),\n        extraDefinitions\n      );\n\n      definitionsProperty.value = callExpression(\n        uniqueId,\n        [allDefinitions]\n      );\n\n      uniqueUsed = true;\n    }\n\n    debug('created a static representation', body);\n\n    return [body, uniqueUsed];\n  };\n\n  return {\n    visitor: {\n      Program (programPath: Object, state: Object) {\n        const tagNames = [];\n        const uniqueId = programPath.scope.generateUidIdentifier('unique');\n        let uniqueUsed = false;\n\n        programPath.traverse({\n          ImportDeclaration (path: Object) {\n            if (path.node.source.value === 'graphql-tag') {\n              const defaultSpecifier = path.node.specifiers.find((specifier) => {\n                return (\n                isImportDefaultSpecifier(specifier)\n                );\n              });\n\n              if (defaultSpecifier) {\n                tagNames.push(defaultSpecifier.local.name);\n\n                if (path.node.specifiers.length === 1) {\n                  path.remove();\n                } else {\n                  path.node.specifiers = path.node.specifiers.filter(\n                    (specifier) => {\n                      return specifier !== defaultSpecifier;\n                    }\n                  );\n                }\n              }\n            }\n          },\n          TaggedTemplateExpression (path: Object) {\n            if (tagNames.some((name) => {\n              return isIdentifier(path.node.tag, {name});\n            })) {\n              try {\n                debug('quasi', path.node.quasi);\n\n                const [body, used] = compile(path.get('quasi'), uniqueId, state.opts);\n\n                uniqueUsed = uniqueUsed || used;\n\n                path.replaceWith(body);\n              } catch (error) {\n                // eslint-disable-next-line no-console\n                console.error('error', error);\n              }\n            }\n          }\n        });\n\n        if (uniqueUsed) {\n          programPath.unshiftContainer(\n            'body',\n            variableDeclaration(\n              'const',\n              [variableDeclarator(uniqueId, uniqueFn)]\n            )\n          );\n        }\n      }\n    }\n  };\n};\n"]}